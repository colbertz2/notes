#!/usr/bin/env bash

# Version
notes_version="0.5.1"

# Default Date string before config
QUICKNOTE_FORMAT="quicknote-%Y-%m-%d"
NOTES_EXT="md"
# Look for configuration file at ~/.config/notes/config and use it
if [ -f ~/.config/notes/config ]; then
    . ~/.config/notes/config
fi

configured_dir=${NOTES_DIRECTORY%/} # Remove trailing slashes
notes_dir="${configured_dir:-$HOME/notes}"
escaped_notes_dir="$(printf "$notes_dir" | sed -e 's/[]\/$*.^|[]/\\&/g')"

# Make sure the notes directory actually exists, and create it if it doesn't
if ! $(mkdir -p "$notes_dir"); then
    echo "Could not create directory $notes_dir, please update your \$NOTES_DIRECTORY" >&2
    exit 1
fi

# If no $EDITOR, look for `editor` (symlink on debian/ubuntu/etc)
if [ -z "$EDITOR" ] && type editor &>/dev/null; then
    EDITOR=editor
fi

without_notes_dir() {
    cat | sed -e "s/^$escaped_notes_dir//g" | sed -E "s/^\/+//g"
}

sync_notes() {
	GIT_WRAP="git -C $notes_dir"

	# fail if notes_dir isn't a git repo already
	$GIT_WRAP rev-parse --is-inside-work-tree &>/dev/null
	isRepo=$?

	if [ $isRepo -ne 0 ]; then
		echo "fatal: $notes_dir is not a git repository" >&2
		return 2
	fi

	# Get currently checked out branch
	cb=$($GIT_WRAP symbolic-ref --short HEAD)

	# If not on master branch, confirm before syncing
	SKIP_CONFIRM_FILE="$notes_dir/.sync-confirm"
	SKIP=-5
	
	if [ -f $SKIP_CONFIRM_FILE ]; then
		if [ $(cat $SKIP_CONFIRM_FILE) == $cb ]; then
			SKIP=0	# skip confirmation, we've seen this branch before
		fi
	fi
	
	if [ $cb != "master" ] && [ $SKIP -ne 0 ]; then
		printf "WARNING: $cb branch is currently checked out. Proceed?\n" >&2
		printf "    y - yes\n" >&2
		printf "    a - always\n" >&2
		printf "    n - no\n"  >&2
		printf "> " >&2

		read confirm

		case $confirm in
			"y")
				:	# do nothing, proceed to git stuff
				;;
			"a")
				echo "$cb" > $SKIP_CONFIRM_FILE	# skip confirmation in future
				# proceed to git stuff
				;;
			*)
				printf "Sync cancelled.\n" >&2
				return 1	# return early, don't sync
				;;
		esac
	fi

	commit_result=-5
	pull_result=-5
	push_result=-5
	sync_result=-5

	# commmit all changes
	diffs=$($GIT_WRAP status --porcelain | sed 's/^...//')
	if [[ ! -z $diffs ]]; then
		# Some files need to be committed!
		$GIT_WRAP add -A &>/dev/null
		
		mac_addr=$(ip -o link | grep ether | 
			grep "state UP" | awk '{ print $17 }')

		commit_msg="
notes sync automated commit

 - host: $(hostname)
 - user: $(printenv USER)
 - mac : $mac_addr

The following files changed:
$diffs"

		commit_out=$($GIT_WRAP commit -m "$commit_msg")
		commit_result=$?

		if [ $commit_result -ne 0 ]; then
			printf "Sync failed at commit step.\n" >&2
			printf "%s\n" $commit_out >&2
			$GIT_WRAP reset
			return 1
		fi
	else
		commit_result=0
	fi

	# pull first
	$GIT_WRAP pull &>/dev/null
	pull_result=$?

	if [ $pull_result -ne 0 ]; then
		printf "Sync failed at pull step.\n" >&2
		return 1
	fi

	# handle conflicts

	# then push
	{
		$GIT_WRAP push &>/dev/null
		push_result=$?
	} || {
		$GIT_WRAP push -u origin $cb &>/dev/null
		push_result=$?
	}

	if [ $push_result -ne 0 ]; then
		printf "Sync failed at push step.\n" >&2
		return 1
	fi

	# Final check and generate return value
	[ $commit_result -eq 0 ] &&
		[ $pull_result -eq 0 ] &&
		[ $push_result -eq 0 ]
	sync_result=$?

	if [ $sync_result -ne 0 ]; then
		printf "Sync failed.\n" >&2
		return 1
	fi

	printf "Sync successful.\n" >&2
	return 0
}

ls_notes() {
    local ls_output=$(ls -p "$notes_dir/$*" 2>&1 | grep -v "~$")
    local ls_result=$?
    local formatted_output

    if [ $# -gt 0 ]; then
        local path_prefix=$(printf "${*%/}" | sed -e 's/[]\/$*.^|[]/\\&/g')
        formatted_output=$(printf "$ls_output" | sed -E "s/^/$path_prefix\//")
    else
        formatted_output=$ls_output
    fi

    if [[ $ls_result == 0 && "$formatted_output" ]]; then
        printf "$formatted_output\n"
        return 0
    else
        return 2
    fi
}

tree_notes() {
	local tree_output=$(tree "$notes_dir/$*" 2>&1)
	local tree_result=$?

	if [[ $tree_result == 0 && "$tree_output" ]]; then
		printf "$tree_output\n"
		return 0
	else
		return 2
	fi
}	

search_filenames_and_contents() {
    if [ "$#" -gt 0 ]; then
        find_output=$(find "$notes_dir" -type f -exec bash -c \
            "shopt -s nocasematch
            grep -il \"$*\" \"{}\" || if [[ \"{}\" =~ \"$*\" ]]; then
                echo \"{}\";
            fi" \;\
        )
    else
        find_output=$(find "$notes_dir" -type f)
    fi
    find_result=$?
    formatted_output=$(printf "$find_output" | without_notes_dir | sort)

    if [[ $find_result == 0 && "$formatted_output" ]]; then
        printf "$formatted_output\n"
        return 0
    else
        return 2
    fi
}

find_notes() {
    local find_output=$(find "$notes_dir" -ipath "$notes_dir/*$**" -type f 2>&1)
    local find_result=$?
    local formatted_output=$(printf "$find_output" | without_notes_dir | sort)

    if [[ $find_result == 0 && "$formatted_output" ]]; then
        printf "$formatted_output\n"
        return 0
    else
        return 2
    fi
}

grep_notes() {
    if [ ! "$#" -gt 0 ]; then
        printf "Grep requires a pattern, but none was provided.\n"
        return 1
    fi

    local grep_output=$(grep -r "$notes_dir" -li -e "$*" 2>&1)
    local grep_result=$?
    local formatted_output=$(printf "$grep_output" | without_notes_dir | sort)

    if [[ $grep_result == 0 && "$formatted_output" ]]; then
        printf "$formatted_output\n"
        return 0
    else
        return 2
    fi
}

generate_name() {
    local append_num=0
    local format_string="`date +$QUICKNOTE_FORMAT`"
    # Initial test has no append
    local resolved_name=$format_string
    while [[ -e "$notes_dir/$resolved_name.$NOTES_EXT" ]]
    do
        append_num=$[$append_num+1]
        resolved_name=$format_string.$append_num
    done
    printf $resolved_name
}

new_note() {
    local note_name="$*"
    if [[ $note_name == "" ]]; then
         note_name="$(generate_name)"
    fi

    if echo "$note_name" | grep "/$" &> /dev/null; then
        note_name="${note_name}/$(generate_name)"
    fi

    mkdir -p "$(dirname "$notes_dir/$note_name")"

    open_note "$note_name"
}

remove_note() {
    local rm_args=()
    if [[ "$1" == "-r" || "$1" == "--recursive" ]]; then
        # checks for macos, as it doesn't support long arguments for rm
        if [[ "$OSTYPE" == "darwin"* ]]; then
            rm_args+=("-r")
        else
            rm_args+=("--recursive")
        fi
        shift
    fi

    if [ ! "$#" -gt 0 ]; then
        printf "Remove requires a file or folder, but none was provided.\n"
        return 1
    fi

    local note_name="$*"
    local to_remove="$notes_dir/$note_name"

    if [ -f "$notes_dir/$note_name.$NOTES_EXT" ]; then
        to_remove="$notes_dir/$note_name.$NOTES_EXT"
    fi
    rm "${rm_args[@]}" "$to_remove"
}

handle_multiple_notes() {
    local cmd=$1

    if [[ -p /dev/stdin ]]; then
        read -d'\n' note_names
        while read note_name; do
            ${cmd}_note "$note_name"
        done <<< "$note_names"
    else
        ${cmd}_note "${@:2}"
    fi
}

get_full_note_path() {
    local note_path=$1

    if [[ "$note_path" != *.$NOTES_EXT ]]; then
        note_path="$note_path.$NOTES_EXT"
    fi
    if [ ! -f "$note_path" ]; then
        note_path="$notes_dir/$note_path"
    fi

    echo "$note_path"
}

open_note() {
    local note_path=$1

    if [[ -z "$note_path" ]]; then
        open "$notes_dir"
        return
    fi

    if [ -z "$EDITOR" ]; then
        printf "Please set \$EDITOR to edit notes\n"
        exit 1
    fi

    note_path=$( get_full_note_path "$note_path" )

    $EDITOR "$note_path" < /dev/tty
}

cat_note() {
    local note_path=$1

    if [[ -z "$note_path" ]]; then
        printf "Cat requires a name, but none was provided.\n"
        exit 1
    fi

    note_path=$( get_full_note_path "$note_path" )

    cat "$note_path"
}

usage() {
  local name=$(basename $0)
	cat <<EOF
$name is a command line note taking tool.

Usage:
    $name sync                            # Syncs notes using git
    $name new|n <name>                    # Create a new note
    $name ls <pattern>                    # List notes by path
    $name find|f [pattern]                # Search notes by filename and path
    $name grep|g <pattern>                # Search notes by content
    $name search|s [pattern]              # Search notes by filename or content
    $name open|o                          # Open your notes directory
    $name open|o <name>                   # Open a note for editing by full name
    $name rm [-r | --recursive] <name>    # Remove note, or folder if -r or --recursive is given
    $name cat <name>                      # Display note
    echo <name> | $name open|o            # Open all note filenames piped in
    echo <name> | $name cat               # Display all note filenames piped in
    $name --help                          # Print this usage information

'command|c' means you can use 'command' or the equivalent shorthand alias 'c'

Your notes directory is $notes_dir. You can
override this by setting \$NOTES_DIRECTORY to your preferred path.
EOF
}

version() {
  local name=$(basename $0)
	cat <<EOF
$name $notes_version (custom)
https://github.com/colbertz2/notes
EOF
}

main() {
    local ret=0
    local cmd=""

    case "$1" in
		"sync")
			cmd="sync_notes"
			;;
        "new"|"n" )
            cmd="new_note"
            ;;
        "ls"|"" )
            cmd="ls_notes"
            ;;
        "tree"|"t" )
        	cmd="tree_notes"
			;;
        "search"|"s" )
            cmd="search_filenames_and_contents"
            ;;
        "find"|"f" )
            cmd="find_notes"
            ;;
        "grep"|"g" )
            cmd="grep_notes"
            ;;
        "open"|"o" )
            cmd="handle_multiple_notes open"
            ;;
        "rm" )
            cmd="remove_note"
            ;;
        "cat" )
            cmd="handle_multiple_notes cat"
            ;;
        "help" | --help | -help | -h )
            cmd="usage"
            ;;
        --version | -version )
            cmd="version"
            ;;
        * )
            printf "$1 is not a recognized notes command.\n\n"
            cmd="usage"
            ret=1
            ;;
    esac
    shift

    $cmd "$@"
    ret=$[$ret+$?]
    exit $ret
}
main "$@"

